name: Open Dental to Keragon Sync

on:
  schedule:
    - cron: '0 7 * * *'  # Deep sync at 2 AM CDT (7 AM UTC)
    - cron: '0,30 13-23 * * *'  # Incremental sync every 30 minutes from 8:00 AM–6:00 PM CDT
    - cron: '0,30 0-1 * * *'   # Incremental sync every 30 minutes from 7:00 PM–8:00 PM CDT
  workflow_dispatch:
    inputs:
      force_deep_sync:
        description: 'Force a deep sync to repopulate cache'
        required: false
        default: 'false'

concurrency:
  group: sync-open-dental-to-keragon-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show script version and mtime
        run: |
          echo "## Script file information"
          ls -l sync_script.py || true
          stat sync_script.py || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil jq
          pip install mega.py==1.0.8 tenacity==8.5.0 requests urllib3

      - name: Restore cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: |
            patient_cache.json
          key: sync-cache-patients-latest
          restore-keys: |
            sync-cache-patients-
        continue-on-error: true

      - name: Debug cache restore
        run: |
          echo "## Cache restore status"
          if [ "${{ steps.restore-cache.outputs.cache-hit }}" == "true" ]; then
            echo "Cache hit: Successfully restored cache"
            ls -l patient_cache.json || echo "Patient cache file not found after restore"
          else
            echo "Cache miss or partial restore: Will use deep sync to rebuild cache"
          fi
          
          # Show what cache files exist (only check patient cache for restore)
          if [ -f patient_cache.json ]; then
            echo "patient_cache.json found, size: $(stat -f%z patient_cache.json 2>/dev/null || stat -c%s patient_cache.json)"
            echo "Number of patients: $(jq '.patients | length' patient_cache.json 2>/dev/null || echo 'Failed to count patients')"
          else
            echo "patient_cache.json not found"
          fi
          
          # appointment_types_cache.json will be restored from git if it exists
          if [ -f appointment_types_cache.json ]; then
            echo "appointment_types_cache.json found in repository"
          else
            echo "appointment_types_cache.json not found - will be created by sync"
          fi

      - name: Check for last_sync_state.json
        id: check_state
        run: |
          if [ -f last_sync_state.json ]; then
            echo "state_file_exists=true" >> $GITHUB_OUTPUT
            echo "last_sync_state.json exists"
          else
            echo "state_file_exists=false" >> $GITHUB_OUTPUT
            echo "last_sync_state.json not found"
          fi

      - name: Determine sync type
        id: sync_type
        run: |
          FORCE_DEEP_SYNC="false"
          SYNC_REASON="incremental"
          
          # Check if manual deep sync requested
          if [ "${{ github.event.inputs.force_deep_sync }}" == "true" ]; then
            FORCE_DEEP_SYNC="true"
            SYNC_REASON="manual_deep_sync"
          # Check if scheduled deep sync (2 AM CDT)
          elif [[ "${{ github.event_name }}" == "schedule" && "${{ github.event.schedule }}" == "0 7 * * *" ]]; then
            FORCE_DEEP_SYNC="true"
            SYNC_REASON="scheduled_deep_sync"
          # Check if no state file exists (first run)
          elif [ "${{ steps.check_state.outputs.state_file_exists }}" == "false" ]; then
            FORCE_DEEP_SYNC="true"
            SYNC_REASON="first_run_no_state"
          # Check if cache is completely missing
          elif [ ! -f patient_cache.json ]; then
            FORCE_DEEP_SYNC="true"
            SYNC_REASON="cache_missing"
          fi
          
          echo "force_deep_sync=$FORCE_DEEP_SYNC" >> $GITHUB_OUTPUT
          echo "sync_reason=$SYNC_REASON" >> $GITHUB_OUTPUT
          echo "Sync type determined: $SYNC_REASON (deep_sync=$FORCE_DEEP_SYNC)"

      - name: Ensure .gitignore includes sensitive files
        run: |
          echo "Ensuring .gitignore excludes ONLY patient data files"
          if [ -f .gitignore ]; then
            grep -q "patient_cache.json" .gitignore || echo "patient_cache.json" >> .gitignore
            grep -q "appointments_op_*.json" .gitignore || echo "appointments_op_*.json" >> .gitignore
            sed -i '/^appointment_types_cache\.json$/d' .gitignore 2>/dev/null || true
            sed -i '/^sent_appointments\.json$/d' .gitignore 2>/dev/null || true
            sed -i '/^appointment_cache\.json$/d' .gitignore 2>/dev/null || true
            sed -i '/^last_sync_state\.json$/d' .gitignore 2>/dev/null || true
          else
            cat > .gitignore << 'EOF'
          # Sensitive patient data files - NEVER COMMIT
          patient_cache.json
          appointments_op_*.json
          
          # Non-sensitive files are committed:
          # - appointment_types_cache.json (appointment types, no patient data)
          # - sent_appointments.json (tracking state, no patient details)
          # - last_sync_state.json (sync timestamps)
          # - appointment_cache.json (if it contains no patient data)
          EOF
          fi
          
          echo "Updated .gitignore to protect only patient data"

      - name: Run sync
        id: sync
        env:
          OPEN_DENTAL_DEVELOPER_KEY: ${{ secrets.OPEN_DENTAL_DEVELOPER_KEY }}
          MEGA_EMAIL: ${{ secrets.MEGA_EMAIL }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
          OPEN_DENTAL_CUSTOMER_KEY: ${{ secrets.OPEN_DENTAL_CUSTOMER_KEY }}
          KERAGON_WEBHOOK_URL: ${{ secrets.KERAGON_WEBHOOK_URL }}
          CLINIC_NUMS: "${{ secrets.CLINIC_NUM_1 }},${{ secrets.CLINIC_NUM_2 }}"
          LOG_LEVEL: "DEBUG"
          CLINIC_DELAY_SECONDS: "5.0"
          INCREMENTAL_SYNC_MINUTES: "15"
          DEEP_SYNC_HOURS: "720"
          SAFETY_OVERLAP_HOURS: "2"
          ENABLE_CACHING: "true"
          CACHE_EXPIRY_MINUTES: "30"
          USE_SPECIFIC_FIELDS: "false"
          ENABLE_PAGINATION: "true"
          PAGE_SIZE: "100"
          MAX_RECORDS_PER_REQUEST: "100"
        run: |
          echo "Starting sync for run_id=${{ github.run_id }}, run_number=${{ github.run_number }}, run_attempt=${{ github.run_attempt }}"
          echo "Sync reason: ${{ steps.sync_type.outputs.sync_reason }}"
          
          if [ "${{ steps.sync_type.outputs.force_deep_sync }}" == "true" ]; then
            echo "Running deep sync (reason: ${{ steps.sync_type.outputs.sync_reason }})"
            python3 sync_script.py --force-deep-sync --verbose --once
          else
            echo "Running incremental sync"
            python3 sync_script.py --verbose --once
          fi

      - name: Validate sync results
        run: |
          echo "## Validating sync results"
          if [ ! -f patient_cache.json ]; then
            echo "ERROR: patient_cache.json was not created by sync"
            exit 1
          fi
          if ! jq empty patient_cache.json 2>/dev/null; then
            echo "ERROR: patient_cache.json contains invalid JSON"
            exit 1
          fi
          PATIENT_COUNT=$(jq '.patients | length' patient_cache.json 2>/dev/null || echo "0")
          echo "Sync completed successfully. Patient cache contains $PATIENT_COUNT patients"
          if [ -f appointment_types_cache.json ]; then
            if jq empty appointment_types_cache.json 2>/dev/null; then
              echo "appointment_types_cache.json is valid"
            else
              echo "WARNING: appointment_types_cache.json contains invalid JSON"
            fi
          fi

      - name: Clean up debug appointment files
        if: always()
        run: |
          echo "Cleaning up debug appointment files"
          rm -f appointments_op_*.json
          echo "Removed appointments_op_*.json files"

      - name: Save cache with retry
        id: save-cache
        uses: actions/cache@v4
        with:
          path: |
            patient_cache.json
          key: sync-cache-patients-${{ github.run_id }}
        continue-on-error: true

      - name: Update latest cache pointer
        uses: actions/cache@v4
        with:
          path: |
            patient_cache.json
          key: sync-cache-patients-latest
        continue-on-error: true

      - name: Handle cache save failure
        if: steps.save-cache.outcome != 'success' && steps.sync.outcome == 'success'
        run: |
          echo "## Cache save failed - will rebuild from scratch on next run"
          echo "Next run will automatically detect missing cache and perform deep sync"

      - name: Debug cache operation
        if: always()
        run: |
          echo "## Final cache status"
          echo "Cache save outcome: ${{ steps.save-cache.outcome }}"
          if [ -f patient_cache.json ]; then
            PATIENT_COUNT=$(jq '.patients | length' patient_cache.json 2>/dev/null || echo "unknown")
            FILE_SIZE=$(stat -c%s patient_cache.json 2>/dev/null || stat -f%z patient_cache.json 2>/dev/null || echo "unknown")
            echo "patient_cache.json: $PATIENT_COUNT patients, $FILE_SIZE bytes"
          else
            echo "patient_cache.json: missing"
          fi
          if [ -f appointment_types_cache.json ]; then
            FILE_SIZE=$(stat -c%s appointment_types_cache.json 2>/dev/null || stat -f%z appointment_types_cache.json 2>/dev/null || echo "unknown")
            echo "appointment_types_cache.json: $FILE_SIZE bytes"
          else
            echo "appointment_types_cache.json: missing"
          fi

      - name: Commit and push state files (excluding patient data)
        if: steps.sync.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore(sync): update sync state and cache files [skip ci]'
          file_pattern: 'last_sync_state.json sent_appointments.json appointment_types_cache.json operatory_cache.json .gitignore'
          commit_user_name: 'GitHub Actions Bot'
          commit_user_email: 'actions@github.com'
