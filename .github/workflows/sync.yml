name: Open Dental to Keragon Sync

on:
  schedule:
    - cron: '0 7 * * *'  # Deep sync at 2 AM CDT (7 AM UTC)
    - cron: '2,17,32,47 13-23 * * *'  # Incremental sync 8:02 AMâ€“8:47 PM CDT
    - cron: '2,17,32,47 0-1 * * *'  # Incremental sync 8:02 PM CDT
  workflow_dispatch:

concurrency:
  group: sync-open-dental-to-keragon
  cancel-in-progress: true  # Cancel concurrent runs to avoid cache conflicts

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show script version and mtime
        run: |
          echo "## Script file information"
          ls -l sync_script.py || true
          stat sync_script.py || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Acquire lock to prevent concurrent runs
        run: |
          echo "Acquiring lock to prevent concurrent runs"
          for i in {1..10}; do
            if [ ! -f lockfile ]; then
              echo "Lock acquired" > lockfile
              echo "Lock acquired successfully"
              break
            fi
            echo "Lockfile exists, waiting... (attempt $i)"
            sleep 30
          done
          if [ ! -f lockfile ]; then
            echo "Failed to acquire lock after 10 attempts"
            exit 1
          fi

      - name: Restore cache
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: |
            patient_cache.json
            appointment_types_cache.json
          key: sync-cache-patients-${{ github.run_number }}
          restore-keys: |
            sync-cache-patients-
        continue-on-error: true

      - name: Debug cache restore
        run: |
          echo "## Cache restore status"
          if [ "${{ steps.restore-cache.outputs.cache-hit }}" == "true" ]; then
            echo "Cache hit: Successfully restored patient_cache.json and appointment_types_cache.json"
            ls -l patient_cache.json appointment_types_cache.json || echo "Cache files not found after restore"
            if [ -f patient_cache.json ]; then
              echo "patient_cache.json contents:"
              cat patient_cache.json
              jq '.patients | length' patient_cache.json || echo "Failed to count patients"
            fi
            if [ -f appointment_types_cache.json ]; then
              echo "appointment_types_cache.json contents:"
              cat appointment_types_cache.json
            fi
          else
            echo "Cache miss: No cache found or cache restore failed"
            echo "Will initialize patient_cache.json"
          fi

      - name: Initialize patient cache if missing
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          echo "No patient cache restored, creating patient_cache.json with initial data"
          cat << EOF > patient_cache.json
          {
            "cache_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "patients": {}
          }
          EOF
          if [ ! -f appointment_types_cache.json ]; then
            echo "No appointment types cache restored, creating empty appointment_types_cache.json"
            echo '{"cache_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "appointment_types": {"shared": {}}}' > appointment_types_cache.json
          fi

      - name: Check for last_sync_state.json
        id: check_state
        run: |
          if [ -f last_sync_state.json ]; then
            echo "state_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "state_file_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug workspace files before sync
        run: |
          echo "## Workspace files before sync"
          find $GITHUB_WORKSPACE -type f
          if [ -f patient_cache.json ]; then
            echo "patient_cache.json contents:"
            cat patient_cache.json
            jq '.patients | length' patient_cache.json || echo "Failed to count patients"
          else
            echo "patient_cache.json not found"
          fi
          if [ -f appointment_types_cache.json ]; then
            echo "appointment_types_cache.json contents:"
            cat appointment_types_cache.json
          else
            echo "appointment_types_cache.json not found"
          fi

      - name: Ensure .gitignore includes sensitive files
        run: |
          echo "Checking .gitignore for sensitive files"
          if [ -f .gitignore ]; then
            grep -q "patient_cache.json" .gitignore || echo "Warning: patient_cache.json not in .gitignore"
            grep -q "appointment_types_cache.json" .gitignore || echo "Warning: appointment_types_cache.json not in .gitignore"
            grep -q "last_sync_state.json" .gitignore || echo "Warning: last_sync_state.json not in .gitignore"
            grep -q "sent_appointments.json" .gitignore || echo "Warning: sent_appointments.json not in .gitignore"
            grep -q "appointment_cache.json" .gitignore || echo "Warning: appointment_cache.json not in .gitignore"
            grep -q "lockfile" .gitignore || echo "Warning: lockfile not in .gitignore"
          else
            echo "Error: .gitignore file not found, sensitive files may be exposed"
          fi

      - name: Run sync
        id: sync
        env:
          OPEN_DENTAL_DEVELOPER_KEY: ${{ secrets.OPEN_DENTAL_DEVELOPER_KEY }}
          OPEN_DENTAL_CUSTOMER_KEY: ${{ secrets.OPEN_DENTAL_CUSTOMER_KEY }}
          KERAGON_WEBHOOK_URL: ${{ secrets.KERAGON_WEBHOOK_URL }}
          CLINIC_NUMS: "${{ secrets.CLINIC_NUM_1 }},${{ secrets.CLINIC_NUM_2 }}"
          LOG_LEVEL: "DEBUG"
          CLINIC_DELAY_SECONDS: "5.0"
          INCREMENTAL_SYNC_MINUTES: "15"
          DEEP_SYNC_HOURS: "720"
          SAFETY_OVERLAP_HOURS: "2"
          ENABLE_CACHING: "true"
          CACHE_EXPIRY_MINUTES: "30"
          USE_SPECIFIC_FIELDS: "false"
          ENABLE_PAGINATION: "true"
          PAGE_SIZE: "100"
          MAX_RECORDS_PER_REQUEST: "100"
        run: |
          if [ "${{ steps.check_state.outputs.state_file_exists }}" == "false" ]; then
            echo "No last_sync_state.json found, running deep sync"
            python3 sync_script.py --force-deep-sync --verbose --once
          elif [[ "${{ github.event_name }}" == "schedule" && "${{ github.event.schedule }}" == "0 7 * * *" ]]; then
            echo "Running deep sync at 2 AM CDT"
            python3 sync_script.py --force-deep-sync --verbose --once
          else
            echo "Running incremental sync"
            python3 sync_script.py --verbose --once
          fi

      - name: Clean up debug appointment files
        if: always()
        run: |
          echo "Cleaning up debug appointment files"
          rm -f appointments_op_*.json
          echo "Removed appointments_op_*.json files"

      - name: Debug workspace files after sync
        if: always()
        run: |
          echo "## Workspace files after sync"
          find $GITHUB_WORKSPACE -type f
          if [ -f patient_cache.json ]; then
            echo "patient_cache.json contents:"
            cat patient_cache.json
            jq '.patients | length' patient_cache.json || echo "Failed to count patients"
          else
            echo "patient_cache.json not found"
            echo "Creating empty patient_cache.json to ensure cache save"
            echo '{"cache_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "patients": {}}' > patient_cache.json
          fi
          if [ -f appointment_types_cache.json ]; then
            echo "appointment_types_cache.json contents:"
            cat appointment_types_cache.json
          else
            echo "appointment_types_cache.json not found"
            echo "Creating empty appointment_types_cache.json to ensure cache save"
            echo '{"cache_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "appointment_types": {"shared": {}}}' > appointment_types_cache.json
          fi

      - name: Save cache
        if: always()
        id: save-cache
        uses: actions/cache@v3
        with:
          path: |
            patient_cache.json
            appointment_types_cache.json
          key: sync-cache-patients-${{ github.run_number }}

      - name: Debug cache save
        if: always()
        run: |
          echo "## Cache save status"
          if [ "${{ steps.save-cache.outcome }}" == "success" ]; then
            echo "Cache saved successfully with key sync-cache-patients-${{ github.run_number }}"
            echo "Cache contents:"
            ls -l patient_cache.json appointment_types_cache.json || echo "Cache files not found"
            if [ -f patient_cache.json ]; then
              echo "patient_cache.json contents:"
              cat patient_cache.json
              jq '.patients | length' patient_cache.json || echo "Failed to count patients"
            fi
          else
            echo "Cache save failed, possibly due to concurrent run or cache reservation"
          fi

      - name: Release lock
        if: always()
        run: |
          echo "Releasing lock"
          rm -f lockfile
          echo "Lock released"

      - name: Commit and push state files
        if: steps.sync.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          # Add state and cache files if they exist, exclude patient_cache.json
          [ -f last_sync_state.json ] && git add last_sync_state.json
          [ -f sent_appointments.json ] && git add sent_appointments.json
          [ -f appointment_types_cache.json ] && git add appointment_types_cache.json
          [ -f appointment_cache.json ] && git add appointment_cache.json
          git diff --cached --quiet || (
            git commit -m "chore(sync): update sync state and cache files [skip ci]" &&
            git push
          )
