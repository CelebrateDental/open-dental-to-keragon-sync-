name: Open Dental to Keragon Sync

on:
  schedule:
    - cron: '0 7 * * *'  # Deep sync at 2 AM CDT (7 AM UTC)
    - cron: '0,30 13-23 * * *'  # Incremental sync every 30 minutes from 8:00 AM–6:00 PM CDT
    - cron: '0,30 0-1 * * *'   # Incremental sync every 30 minutes from 7:00 PM–8:00 PM CDT
  workflow_dispatch:

concurrency:
  group: sync-open-dental-to-keragon-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show script version and mtime
        run: |
          echo "## Script file information"
          ls -l sync_script.py || true
          stat sync_script.py || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil jq

      - name: Restore cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: |
            patient_cache.json
            appointment_types_cache.json
          key: sync-cache-patients
        continue-on-error: false  # Fail if cache restore fails

      - name: Debug cache restore
        run: |
          echo "## Cache restore status"
          if [ "${{ steps.restore-cache.outputs.cache-hit }}" == "true" ]; then
            echo "Cache hit: Successfully restored cache with key sync-cache-patients"
            ls -l patient_cache.json appointment_types_cache.json || echo "Cache files not found after restore"
            if [ -f patient_cache.json ]; then
              echo "patient_cache.json contents:"
              cat patient_cache.json
              echo "Number of patients: $(jq '.patients | length' patient_cache.json || echo 'Failed to count patients')"
            fi
            if [ -f appointment_types_cache.json ]; then
              echo "appointment_types_cache.json contents:"
              cat appointment_types_cache.json
            fi
          else
            echo "Cache miss: No cache found for key sync-cache-patients"
            echo "Error: Persistent cache is missing. Please restore from backup or trigger a deep sync manually."
            exit 1
          fi

      - name: Check for last_sync_state.json
        id: check_state
        run: |
          if [ -f last_sync_state.json ]; then
            echo "state_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "state_file_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug workspace files before sync
        run: |
          echo "## Workspace files before sync"
          find $GITHUB_WORKSPACE -type f
          if [ -f patient_cache.json ]; then
            echo "patient_cache.json contents:"
            cat patient_cache.json
            echo "Number of patients: $(jq '.patients | length' patient_cache.json || echo 'Failed to count patients')"
          else
            echo "patient_cache.json not found"
            echo "Error: patient_cache.json missing before sync"
            exit 1
          fi
          if [ -f appointment_types_cache.json ]; then
            echo "appointment_types_cache.json contents:"
            cat appointment_types_cache.json
          else
            echo "appointment_types_cache.json not found"
          fi

      - name: Ensure .gitignore includes sensitive files
        run: |
          echo "Checking .gitignore for sensitive files"
          if [ -f .gitignore ]; then
            grep -q "patient_cache.json" .gitignore || echo "patient_cache.json" >> .gitignore
            grep -q "appointment_types_cache.json" .gitignore || echo "appointment_types_cache.json" >> .gitignore
            grep -q "last_sync_state.json" .gitignore || echo "last_sync_state.json" >> .gitignore
            grep -q "sent_appointments.json" .gitignore || echo "sent_appointments.json" >> .gitignore
            grep -q "appointment_cache.json" .gitignore || echo "appointment_cache.json" >> .gitignore
          else
            echo -e "patient_cache.json\nappointment_types_cache.json\nlast_sync_state.json\nsent_appointments.json\nappointment_cache.json" > .gitignore
          fi

      - name: Run sync
        id: sync
        env:
          OPEN_DENTAL_DEVELOPER_KEY: ${{ secrets.OPEN_DENTAL_DEVELOPER_KEY }}
          OPEN_DENTAL_CUSTOMER_KEY: ${{ secrets.OPEN_DENTAL_CUSTOMER_KEY }}
          KERAGON_WEBHOOK_URL: ${{ secrets.KERAGON_WEBHOOK_URL }}
          CLINIC_NUMS: "${{ secrets.CLINIC_NUM_1 }},${{ secrets.CLINIC_NUM_2 }}"
          LOG_LEVEL: "DEBUG"
          CLINIC_DELAY_SECONDS: "5.0"
          INCREMENTAL_SYNC_MINUTES: "15"
          DEEP_SYNC_HOURS: "720"
          SAFETY_OVERLAP_HOURS: "2"
          ENABLE_CACHING: "true"
          CACHE_EXPIRY_MINUTES: "30"
          USE_SPECIFIC_FIELDS: "false"
          ENABLE_PAGINATION: "true"
          PAGE_SIZE: "100"
          MAX_RECORDS_PER_REQUEST: "100"
        run: |
          echo "Starting sync for run_id=${{ github.run_id }}, run_number=${{ github.run_number }}, run_attempt=${{ github.run_attempt }}"
          if [ "${{ steps.check_state.outputs.state_file_exists }}" == "false" ]; then
            echo "No last_sync_state.json found, running deep sync"
            python3 sync_script.py --force-deep-sync --verbose --once
          elif [[ "${{ github.event_name }}" == "schedule" && "${{ github.event.schedule }}" == "0 7 * * *" ]]; then
            echo "Running deep sync at 2 AM CDT"
            python3 sync_script.py --force-deep-sync --verbose --once
          else
            echo "Running incremental sync"
            python3 sync_script.py --verbose --once
          fi

      - name: Clean up debug appointment files
        if: always()
        run: |
          echo "Cleaning up debug appointment files"
          rm -f appointments_op_*.json
          echo "Removed appointments_op_*.json files"

      - name: Debug workspace files after sync
        if: always()
        run: |
          echo "## Workspace files after sync"
          find $GITHUB_WORKSPACE -type f
          if [ -f patient_cache.json ]; then
            echo "patient_cache.json contents:"
            cat patient_cache.json
            echo "Number of patients: $(jq '.patients | length' patient_cache.json || echo 'Failed to count patients')"
          else
            echo "patient_cache.json not found"
            echo "Error: patient_cache.json missing after sync; sync may have failed"
            exit 1
          fi
          if [ -f appointment_types_cache.json ]; then
            echo "appointment_types_cache.json contents:"
            cat appointment_types_cache.json
          else
            echo "appointment_types_cache.json not found"
          fi

      - name: Save cache
        id: save-cache
        uses: actions/cache@v4
        with:
          path: |
            patient_cache.json
            appointment_types_cache.json
          key: sync-cache-patients

      - name: Debug cache save
        id: debug-cache-save
        if: always()
        run: |
          echo "## Cache save status"
          if [ "${{ steps.save-cache.outcome }}" == "success" ]; then
            echo "Cache saved successfully with key sync-cache-patients"
            echo "Cache contents:"
            ls -l patient_cache.json appointment_types_cache.json || echo "Cache files not found"
            if [ -f patient_cache.json ]; then
              echo "patient_cache.json contents:"
              cat patient_cache.json
              echo "Number of patients: $(jq '.patients | length' patient_cache.json || echo 'Failed to count patients')"
            fi
          else
            echo "Cache save failed, possibly due to cache reservation or backend issue"
            echo "Cache contents (unsaved):"
            ls -l patient_cache.json appointment_types_cache.json || echo "Cache files not found"
            if [ -f patient_cache.json ]; then
              echo "patient_cache.json contents:"
              cat patient_cache.json
              echo "Number of patients: $(jq '.patients | length' patient_cache.json || echo 'Failed to count patients')"
            fi
            echo "Retrying cache save up to 3 times"
            for i in {1..3}; do
              echo "Attempt $i: Saving cache"
              /usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C $GITHUB_WORKSPACE --files-from manifest.txt --use-compress-program zstdmt && break
              echo "Retry $i failed, waiting 10 seconds"
              sleep 10
            done
            echo "Retry completed, checking cache contents again"
            ls -l patient_cache.json appointment_types_cache.json || echo "Cache files not found after retry"
          fi
        continue-on-error: true

      - name: Commit and push state files
        if: steps.sync.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "actions@github.com"
          # Add state and cache files if they exist, exclude patient_cache.json
          [ -f last_sync_state.json ] && git add last_sync_state.json
          [ -f sent_appointments.json ] && git add sent_appointments.json
          [ -f appointment_types_cache.json ] && git add appointment_types_cache.json
          [ -f appointment_cache.json ] && git add appointment_cache.json
          git diff --cached --quiet || (
            git commit -m "chore(sync): update sync state and cache files [skip ci]" &&
            git push
          )
