name: Open Dental → GHL Sync

on:
  schedule:
    - cron: '0 7 * * *'           # Deep sync at 2 AM CDT (07:00 UTC) during DST
    - cron: '0 13-23,0-1 * * *'   # Hourly at :00 from 8 AM–8 PM CDT (13:00–01:00 UTC)
  workflow_dispatch:
    inputs:
      force_deep_sync:
        description: 'Force a deep sync to repopulate mapping state'
        required: false
        default: 'false'

concurrency:
  group: sync-open-dental-to-ghl-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PYTHONUNBUFFERED: "1"  # flush logs immediately

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show repo tree (debug)
        run: |
          echo "## Repository tree (top level)"
          ls -la
          echo
          echo "## Recursively (first two levels)"
          find . -maxdepth 2 -type f -print | sort

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install system tools needed by the workflow & script
      - name: Install MEGAcmd and tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg curl jq
          sudo install -m 0755 -d /usr/share/keyrings
          curl -fsSL https://mega.nz/keys/MEGA_signing.key | sudo gpg --dearmor -o /usr/share/keyrings/mega.gpg
          echo "deb [signed-by=/usr/share/keyrings/mega.gpg] https://mega.nz/linux/repo/xUbuntu_24.04/ ./" | sudo tee /etc/apt/sources.list.d/meganz.list
          sudo apt-get update -y
          sudo apt-get install -y megacmd

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # (Optional) Cache MEGAcmd session so subsequent runs don't have to re-login
      - name: Cache MEGAcmd session
        uses: actions/cache@v4
        with:
          path: ~/.megaCmd
          key: megacmd-${{ runner.os }}-v1

      - name: Determine sync type
        id: sync_type
        run: |
          FORCE_DEEP_SYNC="false"
          REASON="incremental"
          if [ "${{ github.event.inputs.force_deep_sync }}" = "true" ]; then
            FORCE_DEEP_SYNC="true"; REASON="manual_deep_sync"
          elif [[ "${{ github.event_name }}" == "schedule" && "${{ github.event.schedule }}" == "0 7 * * *" ]]; then
            FORCE_DEEP_SYNC="true"; REASON="scheduled_deep_sync"
          fi
          echo "force_deep_sync=$FORCE_DEEP_SYNC" >> $GITHUB_OUTPUT
          echo "sync_reason=$REASON" >> $GITHUB_OUTPUT
          echo "Starting sync run_id=${{ github.run_id }} reason=$REASON"

      - name: Ensure .gitignore excludes state/PII files
        run: |
          if [ -f .gitignore ]; then
            grep -q "^patient_cache\.json$" .gitignore || echo "patient_cache.json" >> .gitignore
            grep -q "^appointments_store\.json$" .gitignore || echo "appointments_store.json" >> .gitignore
            grep -q "^ghl_appointments_map\.json$" .gitignore || echo "ghl_appointments_map.json" >> .gitignore
            grep -q "^ghl_contacts_map\.json$" .gitignore || echo "ghl_contacts_map.json" >> .gitignore
            grep -q "^sent_appointments\.json$" .gitignore || echo "sent_appointments.json" >> .gitignore
            grep -q "^last_sync_state\.json$" .gitignore || echo "last_sync_state.json" >> .gitignore
            grep -q "^appointment_types_cache\.json$" .gitignore || echo "appointment_types_cache.json" >> .gitignore
            grep -q "^appointments_op_.*\.json$" .gitignore || echo "appointments_op_*.json" >> .gitignore
            grep -q "^__pycache__/$" .gitignore || echo "__pycache__/" >> .gitignore
            grep -q "^\.(venv|env)/$" .gitignore || echo ".venv/" >> .gitignore
          else
            cat > .gitignore << 'EOF'
          # OD→GHL sync: NEVER commit patient/state locally
          patient_cache.json
          appointments_store.json
          ghl_appointments_map.json
          ghl_contacts_map.json
          sent_appointments.json
          last_sync_state.json
          appointment_types_cache.json
          # Debug artifacts
          appointments_op_*.json
          __pycache__/
          .venv/
          .env
          EOF
          fi
          echo "Updated .gitignore"

      - name: Pick script to run
        id: pickscript
        run: |
          SCRIPT=""
          if [ -f "sync_od_to_ghl.py" ]; then
            SCRIPT="sync_od_to_ghl.py"
          elif [ -f "sync_script.py" ]; then
            SCRIPT="sync_script.py"
          fi
          if [ -z "$SCRIPT" ]; then
            echo "ERROR: Neither sync_od_to_ghl.py nor sync_script.py found at repo root."
            exit 1
          fi
          echo "script=$SCRIPT" >> $GITHUB_OUTPUT
          echo "Using $SCRIPT"

      - name: Run sync
        id: sync
        env:
          # ---- OpenDental ----
          OPEN_DENTAL_DEVELOPER_KEY: ${{ secrets.OPEN_DENTAL_DEVELOPER_KEY }}
          OPEN_DENTAL_CUSTOMER_KEY:  ${{ secrets.OPEN_DENTAL_CUSTOMER_KEY }}
          # OPEN_DENTAL_API_URL:    ${{ secrets.OPEN_DENTAL_API_URL }}   # optional override

          # ---- GoHighLevel / LeadConnector ----
          GHL_LOCATION_ID:           ${{ secrets.GHL_LOCATION_ID }}
          GHL_AUTH_TOKEN:            ${{ secrets.GHL_AUTH_TOKEN }}
          GHL_OAUTH_TOKEN:           ${{ secrets.GHL_OAUTH_TOKEN }}
          GHL_API_KEY:               ${{ secrets.GHL_LOCATION_API_KEY }}
          GHL_CALENDAR_MAP:          ${{ secrets.GHL_CALENDAR_MAP }}
          GHL_ASSIGNED_USER_MAP:     ${{ secrets.GHL_ASSIGNED_USER_MAP }}
          GHL_CUSTOM_FIELD_CLINIC_ID: ${{ secrets.GHL_CUSTOM_FIELD_CLINIC_ID }}
          GHL_TAG_FROM_OD:           "fromopendental"

          # ---- Clinics & behavior ----
          CLINIC_NUMS:               ${{ secrets.CLINIC_NUMS }}   # e.g. "9034,9035"
          LOG_LEVEL:                 "DEBUG"
          CLINIC_DELAY_SECONDS:      "5.0"
          INCREMENTAL_SYNC_MINUTES:  "20160"
          DEEP_SYNC_HOURS:           "720"
          SAFETY_OVERLAP_HOURS:      "2"
          ENABLE_PAGINATION:         "true"
          PAGE_SIZE:                 "100"
          REQUEST_TIMEOUT:           "120"
          RETRY_ATTEMPTS:            "5"
          BACKOFF_FACTOR:            "3.0"

          # ---- MEGA (MEGAcmd) ----
          MEGA_EMAIL:                ${{ secrets.MEGA_EMAIL }}
          MEGA_PASSWORD:             ${{ secrets.MEGA_PASSWORD }}
          MEGA_FOLDER:               ${{ secrets.MEGA_FOLDER }}    # e.g. od_ghl_sync
        run: |
          if [ "${{ steps.sync_type.outputs.force_deep_sync }}" = "true" ]; then
            echo "Deep sync: ${{ steps.pickscript.outputs.script }}"
            python3 "${{ steps.pickscript.outputs.script }}" --force-deep-sync --verbose --once
          else
            echo "Incremental sync: ${{ steps.pickscript.outputs.script }}"
            python3 "${{ steps.pickscript.outputs.script }}" --verbose --once
          fi

      - name: Validate state files (non-PHI only)
        run: |
          echo "## Checking non-PHI state artifacts (may be absent—MEGA push can remove locals)"
          for f in last_sync_state.json sent_appointments.json appointments_store.json ghl_appointments_map.json ghl_contacts_map.json appointment_types_cache.json; do
            if [ -f "$f" ]; then
              echo "Found $f (size: $(stat -c%s "$f" 2>/dev/null || stat -f%z "$f"))"
              jq empty "$f" || { echo "Invalid JSON in $f"; exit 1; }
            else
              echo "$f not present locally (expected when MEGA push succeeded)."
            fi
          done

      - name: Clean up debug files
        if: always()
        run: |
          rm -f appointments_op_*.json || true
          echo "Cleaned debug artifacts"

      - name: Rebase on latest main (stash working tree)
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git stash push --include-untracked --all -m "pre-rebase-$(date +%s)" || true
          git fetch origin "${GITHUB_REF_NAME:-main}"
          git pull --rebase origin "${GITHUB_REF_NAME:-main}"
          git stash pop || true
